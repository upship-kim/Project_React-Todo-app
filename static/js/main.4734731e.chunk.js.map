{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cname","onClick","React","memo","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4734731e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n    return (\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"app-title\">일정관리</div>\r\n            <div className=\"content\">{ children }</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { useState, useCallback } from 'react'\r\nimport { MdAdd } from 'react-icons/md'; //react icon library\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ( { onInsert }) => {\r\n    const [value, setValue] = useState('');\r\n    \r\n    const onChange = useCallback(e => {\r\n        setValue(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            onInsert(value);\r\n            setValue('');   //value값 초기화 \r\n            \r\n            //주의점: submit은 브라우저 새로고침을 발생시키므로 이를 중지시켜야함\r\n            //새로고침 되면 새 값이 추가되었다가 바로 삭제됨 \r\n            e.preventDefault();\r\n        }, [onInsert, value],    //onInsert 또는 value가 업데이트되면 리렌더링\r\n    );\r\n\r\n    return (\r\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n            <input placeholder=\"할 일을 입력하세요\"\r\n                    value={value}\r\n                    onChange={onChange}/>\r\n            <button type=\"submit\">\r\n                <MdAdd/>\r\n            </button>            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInsert;\r\n","import React from 'react'\r\nimport{\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline\r\n}   from 'react-icons/md';\r\nimport './TodoListItem.scss';\r\nimport cname from 'classnames';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle, style }) => {\r\n    const { id, text, checked } = todo;     //todo에 포함되어있는 속성들 \r\n    return (\r\n    <div className=\"TodoListItem-virtualized\" style={style}>\r\n        <div className=\"TodoListItem\">\r\n            {/* classnames library 사용  */}\r\n            <div className={cname(\"checkbox\", {checked})} onClick={()=>onToggle(id)}> \r\n                {checked ? <MdCheckBox/> :<MdCheckBoxOutlineBlank/>}\r\n                <div className=\"text\">{text}</div>\r\n            </div>\r\n            <div className=\"remove\" onClick={() => onRemove(id)}>\r\n                <MdRemoveCircleOutline/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(TodoListItem);    //React.memo = 리렌더링을 방지해주는 함수, 즉 TodoListItem의 todo, onRemove, onToggle 이 변하지 않으면 렌더링 하지 않음 \r\n","import React, { useCallback } from 'react'\r\nimport TodoListItem from './TodoListItem';\r\nimport { List } from 'react-virtualized'\r\nimport './TodoList.scss';\r\n\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => { //todos 와 onRemove를 받겠다. \r\n    const rowRenderer = useCallback(\r\n        ({ index, key, style }) => {\r\n            const todo = todos[index];\r\n            return (\r\n                <TodoListItem \r\n                    todo={todo} \r\n                    key={todo.id} \r\n                    onRemove={onRemove} \r\n                    onToggle={onToggle}\r\n                    style={style}\r\n                />\r\n            );\r\n        },\r\n        [onRemove, onToggle, todos],\r\n    );\r\n    return( //list 전체의 모습을 return\r\n        <List\r\n            className=\"TodoList\"\r\n            width={512} //전체크기\r\n            height={513}    //전체 높이\r\n            rowCount={todos.length} //항목 개수\r\n            rowHeight={57}\r\n            rowRenderer={rowRenderer} // 리스트 항목을 렌더링할때 쓰는 함수\r\n            list={todos} // 배열\r\n            style={{ outline:'none'}}   //List에 기본 적용되는 outline 스타일 제거\r\n        />\r\n        \r\n    );   \r\n};\r\nexport default React.memo(TodoList)\r\n","import React, { useState, useRef, useCallback, useReducer } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos() {\n  const array = [];\n  for (let i = 1; i <= 2; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n\n//렌더링 성능 최적화를 위한 방법 1. useState 함수 업데이트 활용 방법\n//***********************************************************************\n// const App = () => {\n//   const [todos, setTodos] = useState(createBulkTodos);  //성능 최적화 테스트를 위해 createBulkTodos 를 통해 대량의 데이터 생성\n//   //   기존 initState\n//   //   [{\n//   //     id: 1,\n//   //     text: '리액트의 기초 알아보기',\n//   //     checked: true,\n//   //   },\n//   //   {\n//   //     id: 2,\n//   //     text: '컴포넌트 스타일링 해보기',\n//   //     checked: true,\n//   //   },\n//   //   {\n//   //     id: 3,\n//   //     text: '일정 관리 앱 만들어보기',\n//   //     checked: false,\n//   //   }\n//   // ]);\n\n//   const nextId = useRef(2501);\n\n//   const onInsert = useCallback(\n//     text => { const todo = { id : nextId.current, text, checked: false};\n//               setTodos( todos => todos.concat(todo));\n//               nextId.current += 1; //nextId 1 더하기\n//             },\n//             [] //todos 배열이 업데이트될때 리렌더링\n//   );\n\n//   const onRemove = useCallback(\n//     id => {\n//       //todo 배열들의 todo.id 값이 위 id값과 같지 않은것들만 새로 배열 추출\n//       setTodos(todos => todos.filter(todo => todo.id !==id));\n//     }, [] //todos 배열이 업데이트 되면 리렌더링\n//   );\n\n//   const onToggle = useCallback(\n//     id => {\n//       setTodos(todos => todos.map(todo =>\n//           todo.id === id ?{...todo, checked: !todo.checked} : todo\n//         )\n//       )\n//     }, []\n//   )\n//   return (\n//       <TodoTemplate>\n//         <TodoInsert onInsert={onInsert}/>\n//         <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n//       </TodoTemplate>\n\n//   );\n// }\n//***********************************************************************\n\n//렌더링 성능 최적화를 위한 방법 2. useReducer 활용 방법\n//***********************************************************************\n\nfunction todoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT':\n      return todos.concat(action.todo);\n\n    case 'REMOVE':\n      return todos.filter((todo) => todo.id !== action.id);\n\n    case 'TOGGLE':\n      return todos.map((todo) =>\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\n      );\n\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\n\n  const nextId = useRef(2);\n\n  const onInsert = useCallback((text) => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    };\n    dispatch({ type: 'INSERT', todo });\n  }, []);\n\n  const onRemove = useCallback((id) => {\n    dispatch({ type: 'REMOVE', id });\n  }, []);\n\n  const onToggle = useCallback((id) => {\n    dispatch({ type: 'TOGGLE', id });\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}